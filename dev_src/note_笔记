三大类设备
----字符设备：以字节为单位，通常情况下是连续的。鼠标，键盘，摄像头
            对应的设备文件是c
----块设备：每次操作是以块为单位的，一块一般是512字节，硬盘，emmc，nandflash
            对应的设备文件是b
----网络设备：不同的网络设备框架不同，没有对应的文件

1------------字符设备-------------------------------------——
==========================
用户空间
    应用程序（open（设备文件名））

===========================
内核空间：
    驱动


===========================
硬件


Makefile的写法：
obj-m += xxxx.o
KERDIR = /内核路径
all:
    make -C $(KERDIR) SUBDIRS=$(PWD) modules
clean:
    make -C $(KERDIR) SUBDIRS=$(PWD) clean
注：
-C:切换到路径下，注意区分gcc -C（编译不链接）



设备号： 主设备号12位 + 次设备号20位

注册字符设备：
        ret = register_chrdev_region(dev_t, cout, name);    //有返回值
        只是注册设备号到系统中
卸载字符设备：
        unregister_chrdev_region(dev_t, cout); //无返回值
**************
linux/cdev.h 中对于结构体cdev定义
    void cdev_init(struct cdev* cdev, const struct file_operations* fops);
    ----初始化一个cdev结构体
        ----参数一：定义的一个结构体变量，不能是指针
        ----内部带有一个memset清零操作

    cdev_add(struct cdev* cdev, dev_t, unsigned n);
    -----

    cdev_del(struct cdev* cdev);
    -----卸载一个设备

int (*open)(struct inode*, struct file*)
inode结构体:
    每个文件都有一个独立的inode结构体，当文件被第一次打开时，这个结构体内容会被加载到内存中。
file结构体：
    只要打开一次文件，就会产生一个file结构体.
    注意内部成员：void* private_data---->存放的私有数据，经常用到

字符设备框架的优化：
功能：动态注册设备号
    alloc_chrdev_region(dev_t* dev, unsigned baseminor, unsigned cout, const char* name);
     参数1：需要分配的设备号
     参数2：起始设备号
     参数3：需要注册的个数
     参数4：名字

驱动的读和写：
    无论应用程序还是驱动程序，读写操作都是站在应用层的角度而言的。


驱动层：
    ssize_t (*read)(struct file, char __user *, size_t, loff_t* );
应用层：
    ssize_t read(int fd, char* buf, size_t);
对比而言，驱动层最后一个参数为偏移量


long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
为了避免命令的冲突，内核规定命令分为4个部分：
    8位     +   8位     +    2位    +    14位
幻数：代表类某种设备，我们可以使用8位的整数或者字符表示
序号：代表了当前这种设备的第几个命令
方向：读， 写， 读写， 无读写
类型大小：代表的是第三个参数对应的类型的大小
_IO(幻数, 序号);
_IOR(幻数， 序号， 数据类型);
_IOW(幻数， 序号， 数据类型);
_IOWR(幻数， 序号， 数据类型);




